test <- tibble::rownames_to_column(transcript_data, "Transcript ID")
View(test)
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
#
blast_data <- read.table(blast_filepath, header = TRUE,
sep = "\t")
View(blast_data)
#
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
View(blast_data)
View(blast_data)
# Columns have no names - add them
colnames(blast_data) <- c("Transcript ID", "Gene ID", )
# Columns have no names - add them
colnames(blast_data[, 1:2]) <- c("Transcript ID", "Gene ID", )
blast_data[, 1:2]
# Columns have no names - add them
names(blast_data[, 1:2]) <- c("Transcript ID", "Gene ID", )
# Columns have no names - add them
names(blast_data[, 1:2]) <- c("Transcript ID", "Gene ID")
View(blast_data)
# Columns have no names - add them
colnames(blast_data[, 1:2]) <- c("Transcript ID", "Gene ID")
View(blast_data)
# Columns have no names - add them
blast_data %>%
rename(
V1 = "Transcript ID",
V2 = "Gene ID"
)
# Columns have no names - add them
blast_data %>%
rename(
"Transcript ID" = V1,
"Gene ID" = V2
)
blast_data
View(blast_data)
# Columns have no names - add them
colnames(blast_data)[1:2] <- c("Transcript ID", "Gene ID")
View(blast_data)
View(transcript_data)
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript ID")
View(transcript_data)
?left_join
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
transcript_data %>%
select(-Transcript_ID) %>%
mutate(name = blast_data$Gene_ID[match(Transcript_ID,
blast_data$Transcript_ID)])
transcript_data %>%
select(-Transcript_ID) %>%
left_join(blast_data$Gene_ID, by = "Transcript_ID")
transcript_data %>%
select(-Transcript_ID) %>%
left_join(blast_data, by = "Transcript_ID")
View(transcript_data)
View(blast_data)
class(transcript_data)
as.tibble(transcript_data)
library(dplyr)
library(tidyverse)
transcript_data %>%
select(-Transcript_ID) %>%
left_join(blast_data, by = "Transcript_ID")
rlang::lasterror()
class(transcript_data)
test <- as.tibble(transcript_data)
test <- as_tibble(transcript_data)
View(test)
test %>%
select(-Transcript_ID) %>%
left_join(blast_data, by = "Transcript_ID")
'rlang::last_error()'
View(test)
transcript_data %>%
left_join(blast_data, by = "Transcript_ID")
View(transcript_data)
transcript_data %>%
left_join(blast_data$Gene_ID, by = "Transcript_ID")
DF2 <- blast_data %>%
select(Transcript_ID, Gene_ID)
View(DF2)
transcriptkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
test <- left_join(transcript_data, transcriptkey, by = "Transcript_ID")
View(test)
head(test)
View(blast_data)
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/amb_v_low_day02/Amb_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST datainto a Transcript ID/Gene ID key
transcriptkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
test <- left_join(transcript_data, transcriptkey, by = "Transcript_ID")
View(test)
View(test)
transcript_data <- left_join(transcript_data, transcriptkey, by = "Transcript_ID")
transcript_data["Transcript_ID", "Gene_ID"]
transcript_data[,c("Transcript_ID", "Gene_ID")]
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
View(transcript_key)
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/amb_v_low_day02/Amb_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST datainto a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
View(transcript_key)
View(blast_data)
!is.na(transcript_key$Gene_ID)
length(!is.na(transcript_key$Gene_ID))
length(transcript_key$Transcript_ID)
sum(!is.na(transcript_key$Gene_ID))
sum(is.na(transcript_key$Gene_ID))
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/day0_day17_ambient/0vs17_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST datainto a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/amb_v_low_day02/Amb_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST datainto a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key %>%
separate(Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "|")
View(blast_data)
View(transcript_key)
?separate
# Separate Gene ID to specifically get Uniprot accession ID
separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "|")
# Separate Gene ID to specifically get Uniprot accession ID
separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "|")
# Separate Gene ID to specifically get Uniprot accession ID
separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
View(transcript_key)
transcript_key
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key(is.na(transcript_key$Accession_ID))
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[is.na(transcript_key$Accession_ID)]
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[is.na(transcript_key$Accession_ID), transcript_key$Accession_ID]
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[is.na(transcript_key$Accession_ID), Accession_ID]
View(transcript_key)
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[is.na(transcript_key$Accession_ID), 3]
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[!is.na(transcript_key$Accession_ID), 3]
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
View(transcript_key)
# Select vector of Accession IDs specifically
Accession_IDs <- transcript_key[!is.na(transcript_key$Accession_ID), "Accession_ID"]
test <- na.omit(transcript_key$Accession_ID)
Accession_IDs
output_path <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/test.txt"
# Create vector of non-NA accession IDs
accession_IDs <- na.omit(transcript_key$Accession_ID)
write_lines(x = accession_IDs, file = output_path, sep = "\n")
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/amb_v_low_day02/Amb_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Create vector of non-NA accession IDs
accession_IDs <- na.omit(transcript_key$Accession_ID)
output_path <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/output/signif_accession_ids/Amb_vsLow_DEG_IDs.txt"
write_lines(x = accession_IDs, file = output_path, sep = "\n")
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/day0_day17_ambient/0vs17_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Create vector of non-NA accession IDs
accession_IDs <- na.omit(transcript_key$Accession_ID)
output_path <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/output/signif_accession_ids/day0_day17_amb_DEG_IDs.txt"
write_lines(x = accession_IDs, file = output_path, sep = "\n")
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_amb_day02/Elev_vsAmb_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Create vector of non-NA accession IDs
accession_IDs <- na.omit(transcript_key$Accession_ID)
output_path <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/output/signif_accession_ids/Elev_vsAmb_DEG_IDs.txt"
write_lines(x = accession_IDs, file = output_path, sep = "\n")
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_low_day02/Elev_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Filepath that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_low_day02/Elev_vsLow_DEGlist_wcols.txt"
# Filepath that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Create vector of non-NA accession IDs
accession_IDs <- na.omit(transcript_key$Accession_ID)
output_path <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/output/signif_accession_ids/Elev_vsLow_DEG_IDs.txt"
write_lines(x = accession_IDs, file = output_path, sep = "\n")
# Absolute path that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_low_day02/Elev_vsLow_DEGlist_wcols.txt"
# Absolute path that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
library(tidyverse)
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
View(blastkey)
length(blastkey$Transcript_ID)
sum(!is.na(blastkey$Gene_ID))
# Absolute path that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_low_day02/Elev_vsLow_DEGlist_wcols.txt"
# Absolute path that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Absolute path that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/elev_v_amb_day02/Elev_vsAmb_DEGlist_wcols.txt"
# Absolute path that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Absolute path that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/amb_v_low_day02/Amb_vsLow_DEGlist_wcols.txt"
# Absolute path that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Absolute path that leads to DESeq2 output file
deseq_output_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/graphs/day0_day17_ambient/0vs17_DEGlist_wcols.txt"
# Absolute path that leads to transcript ID/gene ID table
blast_filepath <- "C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt"
# Read output file into R
transcript_data <- read.table(deseq_output_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
384+726+641+118
609+1156+1022+143
2930-1869
1061/2930
66956/344944
