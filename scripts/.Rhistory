View(kallisto_output)
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
View(kallisto_output)
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
View(DEG_list)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
View(blast_data)
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
# Write results to table
write.table(DEG_list,
file = outpath)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
TPMs <- read.table("../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt")
head(TPMs)
View(TPMs)
TPMs <- read.table("../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
View(TPMs)
uniq_genes <- unique(TPMs$Gene_ID)
length(uniq_genes)
View(TPMs)
View(TPMs)
knitr::opts_chunk$set(echo = TRUE)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
View(blast_data)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
library(tidyverse)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
View(DEG_list)
library(tidyverse)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
head(DEG_list)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
knitr::opts_chunk$set(echo = TRUE)
# Read in differentially-expressed transcript IDs
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
View(amb_elev)
View(amb_elev)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.delim(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt")
View(TPM_file)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.delim(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = FALSE,
sep = "\t")
View(TPM_file)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.delim(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE,
sep = "\t")
View(TPM_file)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.delim(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
View(amb_elev)
View(TPM_file)
# Remove only the first column
amb_elev <- amb_elev[,1]
# Read in differentially-expressed transcript IDs
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove only the first column
amb_elev <- amb_elev[,1, drop = FALSE]
View(amb_elev)
# Change column name
colnames(amb_elev) <- "Transcript_ID"
View(amb_elev)
View(TPM_file)
View(amb_elev)
library(tidyverse)
# Left join TPM file to transcript data
TPM_file <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
View(TPM_file)
# Select only entries with a non-NA value for gene ID
TPM_file <- !is.na(TPM_file)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
TPM_file <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
TPM_file <- TPM_file[!is.na(TPM_file),]
View(TPM_file)
View(amb_elev)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(TPM_file),]
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(TPM_file$Gene_ID),]
amb_elev[!is.na(TPM_file$Gene_ID),]
# Select only DEGs with transcript IDs that match to genes
amb_elev <- amb_elev[!is.na(amb_elev$Gene_ID),]
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(amb_elev$Gene_ID),]
View(amb_elev)
View(amb_elev)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
fill = TRUE,
sep = "\t")
View(DEG_list)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
View(blast_data)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(blast_data)
View(DEG_list)
View(blast_data)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
View(DEG_list)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
fill = TRUE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
View(DEG_match)
