sft <- pickSoftThreshold(CrabExpr0, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n",
main = paste("Scale independence"))
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n",
main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels = powers,
cex = 1,
col = "red")
abline(h = 0.90, col = "red")
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n",
main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels = powers,
cex = 1,
col = "red")
abline(h = 0.90, col = "red")
plot(sft$fitIndices[,1],sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
# Add sft values
text(sft$fitIndices[,1], sft$fitIndices[,5],
labels = powers,
cex = 1,
col = "red")
?TOMsimilarity
softPower <- 9
adjacency <- adjacency(CrabExpr0, power = softPower)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(WGCNA)
library(DESeq2)
# Path to kallisto libraries
kallisto_path <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Libraries we want to read in to our TPM matrix
libraries <- c("178", "118", "132", "359", "349", "334", "463", "481", "485")
# For each row, crab and day should correspond to the order of libraries (ex: 4th row of crabTraits should match libraries[4])
crabTraits <- data.frame("crab" = rep(c("A", "B", "C"), times = 3),
"day" = factor(c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3))))
# Create clinical data trait matrix. Same rules as above, but both crab and day are numeric. Crab A will be noted as 1, B as 2, and C as 3
crabClinicalData <- data.frame("crab" = rep(c(1, 2, 3), times = 3),
"day" = c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3)))
# Create character vector with all filenames for our libraries
kallisto_files <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# Read first kallisto file in to start data frame
TPMcounts <- read.delim(file = kallisto_files[1],
header = TRUE,
sep = "\t")
# Eliminate all columns except transcript ID and TPM
TPMcounts <- TPMcounts %>%
select(target_id, tpm)
# Rename columns for consistency and to ID TPM counts
colnames(TPMcounts)[1:2] <- c("Transcript_ID",
paste0("id", libraries[1], "_TPM"))
# Loop through remaining kallisto files, performing full joins to the kallisto file we read in
for (i in 2:length(kallisto_files)){
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names to give ID to count column
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
# Perform full join, keeping all transcript IDs
TPMcounts <- full_join(TPMcounts, kallisto_output, by = "Transcript_ID")
}
# Create logical matrix for whole dataframe, comparing values to 10
# Move transcript ID to rownames
TPMcounts <- TPMcounts %>%
column_to_rownames(var = "Transcript_ID")
# Get initial dimensions of data frame
dim(TPMcounts)
# Filter out all variables with no counts greater than 10
TPMcounts <- TPMcounts %>%
filter_all(any_vars(. > 10))
# See how many transcripts we have left
dim(TPMcounts)
# Round all counts to the nearest integer
TPMcounts <- round(TPMcounts, digits = 0)
# Normalize raw counts with DESeq()
crab.dds <- DESeqDataSetFromMatrix(countData = TPMcounts,
colData = crabTraits,
design = ~day)
crab.dds <- DESeq(crab.dds)
# Perform vst on DESeq object
vsd <- getVarianceStabilizedData(crab.dds)
# Transpose dataframe to format for WGCNA
CrabExpr0 <- as.data.frame(t(vsd))
# Check dataframe was transposed correctly
dim(CrabExpr0)
# Check for genes and samples with too many missing values
# This won't work here, because we only have 3 samples, and WGCNA requires more than 3, but hey - it's just a practice run. We'll therefore continue regardless, with this section commented out
gsg <- goodSamplesGenes(CrabExpr0, verbose = 3)
gsg$allOK      # should return TRUE if all genes pass test
sampleTree <- hclust(dist(CrabExpr0), method = "average")
plot(sampleTree)
# Print the crabTraits matrix we made earlier
head(crabTraits)
# Use same rownames as expression data to create analogous  matrix
rownames(crabTraits) <- rownames(CrabExpr0)
# Make sure it looks good
head(crabTraits)
# Create a dendrogram to look at sample and trait clustering
sampleTree2 <- hclust(dist(CrabExpr0), method = "average")
traitColors <- numbers2colors(crabClinicalData, signed = FALSE)
# Plot dendrogram
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(crabTraits))
# Create set of soft-thresholding powers
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
# Use network topology analysis function to eval soft-thresholding power vals
sft <- pickSoftThreshold(CrabExpr0, powerVector = powers, verbose = 5)
# Plot scale-free topology fit as function of soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n",
main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels = powers,
cex = 1,
col = "red")
# Plot mean connectivity as function of soft-thresholding power
plot(sft$fitIndices[,1],sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
# Add sft values
text(sft$fitIndices[,1], sft$fitIndices[,5],
labels = powers,
cex = 1,
col = "red")
install.packages("grindr")
```{r libraries)
library(tidyverse)
```
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Path to module - here, the pink module
modulepath <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver10/GeneList-pink.txt"
pinks <- read.delim(file = modulepath, header = TRUE)
View(pinks)
# Vector of all libraries included in module
crablibs <- c(178, 359, 463, 118, 349, 481, 132, 334, 485)
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
testpath <- paste0(libpath, "id", crablibs[1])
testpath
testpath <- paste0(libpath, "id", crablibs[1],"/abundance.tsv")
testpath
test_lib <- read.delim(file = testpath, header = TRUE,
sep = "\t")
View(test_lib)
# Remove all columns except transcripts per million
test_lib[,c(1,5)]
# Remove all columns except transcripts per million
test_lib <- test_lib[,c(1,5)]
View(pinks)
View(test_lib)
pinks <- read.delim(file = modulepath, header = FALSE)
View(pinks)
names(pinks)
names(pinks)[1] <- "Transcript_ID"
View(pinks)
View(test_lib)
# Rename first column of test_lib
names(test_lib) <- c("Transcript_ID", paste("id", crablibs[1]))
View(test_lib)
# Rename first column of test_lib
names(test_lib) <- c("Transcript_ID", paste0("id", crablibs[1]))
View(pinks)
View(test_lib)
pinks <- left_join(pinks, test_lib, by = "Transcript_ID")
View(pinks)
for (i in 1:length(crablibs)) {
filepath <- paste0(i, "id", crablibs[i], "/abundance.tsv")
print(filepath)
}
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
for (i in 1:length(crablibs)) {
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
print(filepath)
}
library(tidyverse)
# Path to module - here, the pink module
modulepath <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver10/GeneList-pink.txt"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module
crablibs <- c(178, 359, 463, 118, 349, 481, 132, 334, 485)
# Read in
module <- read.delim(file = modulepath, header = FALSE)
names(module)[1] <- "Transcript_ID"
View(module)
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
testpath <- paste0(libpath, "id", crablibs[1],"/abundance.tsv")
test_lib <- read.delim(file = testpath, header = TRUE,
sep = "\t")
View(module)
View(test_lib)
# Create loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
}
View(crabdata)
View(module)
# Path to module - here, the pink module
modulepath <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver10/GeneList-pink.txt"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module
crablibs <- c(178, 359, 463, 118, 349, 481, 132, 334, 485)
# Read in module data
module <- read.delim(file = modulepath, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
}
# Remove all columns except transcripts per million
test_lib <- test_lib[,c(1,5)]
# Read in module data
module <- read.delim(file = modulepath, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
}
crabtesting <- crabdata[100,]
View(crabtesting)
crabtesting <- crabdata[1:100,]
View(crabtesting)
crabtesting <- module[1:100,]
View(crabtesting)
View(module)
days <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
crabtesting(names) <- days
names(crabtesting)<- days
View(crabtesting)
# Read in module data
module <- read.delim(file = modulepath, header = FALSE)
# Path to module - here, the pink module
modulepath <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver10/GeneList-pink.txt"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module
crablibs <- c(178, 359, 463, 118, 349, 481, 132, 334, 485)
# Read in module data
module <- read.delim(file = modulepath, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
View(module)
crabtesting <- module[1:100,]
days <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
names(crabtesting) <- days
View(crabtesting)
select(crabtesting, 0)
test <- select(crabtesting, 0)
View(test)
test <- select(crabtesting, "0")
View(test)
names(crabtesting)
crabtesting[, "0"]
test <- crabtesting[, "0"]
days = 0
days <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
days == 0
crabtesting[, days == 0]
test <- crabtesting[, days == 0]
View(test)
test <- rowMeans(crabtesting[, days == 0])
levels(days)
print(i)
for (i in 1:count(levels(days))) {
print(i)
}
for (i in 1:unique(levels(days))) {
print(i)
}
for (i in 1:unique(levels(days))) {
print(i)
}
?group_by
dat <- data.frame(ID = sample(letters, 100, rep = TRUE))
View(dat)
dat %>%
group_by(ID) %>%
summarise(no_rows = length(ID))
View(dat)
levels(days)
unique(levels(days))
nlevels(days)
for (i in 1:nlevels(days)) {
print(i)
}
print(days[i])
days[1]
days[2]
print(as.character(days[2]))
for (i in 1:nlevels(days)) {
print(as.character(days[2]))
}
print(as.character(days[i]))
print(i)
for (i in 1:nlevels(days)) {
print(i)
print(as.character(days[i]))
}
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
}
names(crabtesting) <- days
means <- crabtesting
View(means)
means[-1:10],
means[-1:10,]
means <- data.frame(
Transcript_IDs <- rownames(module)
)
View(means)
test
meantest <- rowMeans(crabtesting[, days == i])
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,(i+1)] <- rowMeans(crabtesting[, days == i])
}
means <- data.frame(
Transcript_IDs <- rownames(module)
)
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,i] <- rowMeans(crabtesting[, days == i])
}
rowMeans(crabtesting[, days == 0])
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,i] <- rowMeans(crabtesting[, days == days[i]])
}
means[,1] <- rowMeans(crabtesting[, days == days[i]])
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,1] <- rowMeans(crabtesting[, days == days[i]])
}
crabtesting <- module[1:100,]
means <- data.frame(
Transcript_IDs <- rownames(crabtesting)
)
days <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
names(crabtesting) <- days
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,1] <- rowMeans(crabtesting[, days == days[i]])
}
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,i] <- rowMeans(crabtesting[, days == days[i]])
}
View(means)
crabtesting <- module[1:100,]
days <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
names(crabtesting) <- days
means <- data.frame(
Transcript_IDs <- rownames(crabtesting)
)
for (i in 1:nlevels(days)) {
print(as.character(days[i]))
means[,(i+1)] <- rowMeans(crabtesting[, days == days[i]])
}
View(means)
View(crabtesting)
mean(c(0.855141, 1.2575, 2.664))
mean(c(6.51223, 32.268, 2.956))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- as.factor(c(0, 2, 17, 0, 2, 17, 0, 2, 17))
View(means)
# Initialize data frame with a column of transcript IDs
means <- data.frame(Transcript_IDs = rownames(module))
# For each level of interest, take the mean of each TPM for each transcript ID and assign to a new column in means
for (i in 1:nlevels(testedvars)) {
means[,(i+1)] <- rowMeans(crabtesting[, days == days[i]])
}
# Rename module columns to correspond to levels of factor we're interested in
names(module) <- testedvar
# Initialize data frame with a column of transcript IDs
means <- data.frame(Transcript_IDs = rownames(module))
# For each level of interest, take the mean of each TPM for each transcript ID and assign to a new column in means
for (i in 1:nlevels(testedvar)) {
means[,(i+1)] <- rowMeans(crabtesting[, days == days[i]])
}
# For each level of interest, take the mean of each TPM for each transcript ID and assign to a new column in means
for (i in 1:nlevels(testedvar)) {
means[,(i+1)] <- rowMeans(module[, days == days[i]])
}
#
names(means) <- levels(testedvar)
#
names(means) <- c("Transcript_ID", levels(testedvar))
# Path to module - here, the pink module
modulepath <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver10/GeneList-pink.txt"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module
crablibs <- c(178, 359, 463, 118, 349, 481, 132, 334, 485)
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- as.factor(c("Day_0", "Day_2", "Day_17", "Day_0", "Day_2", "Day_17", "Day_0", "Day_2", "Day_17"))
# Read in module data
module <- read.delim(file = modulepath, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i], "/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Rename module columns to correspond to levels of factor we're interested in
names(module) <- testedvar
# Initialize data frame with a column of transcript IDs
means <- data.frame(Transcript_IDs = rownames(module))
# For each level of interest, take the mean of each TPM for each transcript ID and assign to a new column in means
for (i in 1:nlevels(testedvar)) {
means[,(i+1)] <- rowMeans(module[, days == days[i]])
}
# Rename module columns to correspond to levels of factor we're interested in
names(module) <- testedvar
# Initialize data frame with a column of transcript IDs
means <- data.frame(Transcript_IDs = rownames(module))
# For each level of interest, take the mean of each TPM for each transcript ID and assign to a new column in means
for (i in 1:nlevels(testedvar)) {
means[,(i+1)] <- rowMeans(module[, testedvar == testedvar[i]])
}
#
names(means) <- c("Transcript_ID", levels(testedvar))
View(means)
View(means)
