input="hemat1.6_elev0_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_elev0_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.1,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.9,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.9,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.4, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.9,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.4, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.9,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.4, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
traceback()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("hematodinium_analysis_functions.R")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/elev2_vs_amb02_indiv_only_pvals.csv")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
# Elevated Day 2 vs. Ambient Day 0+2+17 + Elevated Day 0 + Lowered Day 0
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb0217_elev0_low0_vs_elev2/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_amb0217_elev0_low0_vs_elev2_pvals.csv")
# Elevated Day 0 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev0_vs_elev2_indiv_pvals.csv")
# Ambient Day 0 vs. Ambient Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_amb0_vs_amb2_indiv_pvals.csv")
# Ambient Day 0 vs. Ambient Day 17, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb0_vs_amb17_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_amb0_vs_amb17_indiv_pvals.csv")
# Ambient Day 2 vs. Ambient Day 17, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_amb2_vs_amb17_indiv_pvals.csv")
# Ambient Day 2 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_amb2_vs_elev2_indiv_pvals.csv")
library(ape)
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
getwd()
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
library(ape)
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
# Edit these to match your data file names:
input="cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbaihemat2.0_elev2_vs_amb02_indiv_only_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
library(ape)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("36_running_GO-MWU")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome")
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("36_running_GO-MWU")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("36_running_GO-MWU")
# Edit these to match your data file names:
input="hemat1.6_elev0_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_elev0_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
getwd()
gomwuout <- read.table(file = "BP_hemat1.6_elev0_vs_elev2_indiv_pvals.csv",
sep = " ",
header = TRUE)
View(gomwuout)
gomwuout <- read.table(file = "BP_hemat1.6_elev0_vs_elev2_indiv_pvals.csv",
sep = "\t",
header = TRUE)
View(gomwuout)
getwd()
# Edit these to match your data file names:
input="hemat1.6_amb2_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_amb2_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
gomwuout <- read.table(file = "BP_hemat1.6_amb2_vs_elev2_indiv_pvals.csv",
sep = "\t",
header = TRUE)
View(gomwuout)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/graphs/DESeq2_output/hemat_transcriptomev1.6/elev0_vs_elev2_indiv")
gomwuout <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
View(deseq)
rownames_to_column(deseq, var = "seqid")
deseq <- rownames_to_column(deseq, var = "seqid")
View(deseq)
deseq <-grep("TRINITY_DN81_c0_g1_*", deseq$seqid)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN81_c0_g1_*", deseq$seqid), ]
View(deseq)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN2969_c0_g1_*", deseq$seqid), ]
View(deseq)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/graphs/DESeq2_output/hemat_transcriptomev1.6/amb2_vs_elev2_indiv")
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN2969_c0_g1_*", deseq$seqid), ]
View(deseq)
deseq <-deseq[grep("TRINITY_DN81_c0_g1_*", deseq$seqid), ]
View(deseq)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN81_c0_g1_*", deseq$seqid), ]
View(deseq)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN2969_c0_g1_*", deseq$seqid), ]
View(deseq)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/graphs/DESeq2_output/hemat_transcriptomev1.6/elev0_vs_elev2_indiv")
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN605_c0_g1_*", deseq$seqid), ]
View(deseq)
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN50_c0_g1_*", deseq$seqid), ]
deseq <- read.table(file = "AllGenes_wcols.txt",
sep = "\t",
header = TRUE)
deseq <- rownames_to_column(deseq, var = "seqid")
deseq <-deseq[grep("TRINITY_DN537_c0_g1_*", deseq$seqid), ]
knitr::opts_chunk$set(echo = TRUE)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/hemat_transcriptomev1.6/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEG_list)
blast_data <- read.delim("../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab",
header = FALSE,
sep = "\t")
View(blast_data)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/hemat_transcriptomev1.6/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/hemat_transcriptomev1.6/amb2_vs_elev2_indiv_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries/hemat_transcriptomev1.6/"
libraries <- "*"
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
head(DEG_list)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
tpms <- read.table(file = "../output/TPM_counts/hemat_transcriptomev1.6/amb2_vs_elev2_indiv_DEG_TPMs.txt",
sep = "\t",
header = TRUE)
View(tpms)
tpms <- read.table(file = "../output/TPM_counts/hemat_transcriptomev1.6/amb2_vs_elev2_indiv_DEG_TPMs.txt",
sep = " ",
header = TRUE)
View(tpms)
plot(tpms)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/hemat_transcriptomev1.6/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/hemat_transcriptomev1.6/elev0_vs_elev2_indiv_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries/hemat_transcriptomev1.6/"
libraries <- "*"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
head(DEG_list)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbaihemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_hemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_hemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
knitr::opts_chunk$set(echo = TRUE)
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/16_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/cbaihemat_transcriptomev2.0/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
