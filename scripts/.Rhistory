txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
# Edit these to match your data file names:
input="elev2_vs_amb02_indiv_only_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="elev2_vs_amb02_indiv_only_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="amb0217_elev0_low0_vs_elev2_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Edit these to match your data file names:
input="elev2_vs_amb02_indiv_only_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="elev2_vs_amb02_indiv_only_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# Elevated Day 0 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/elev0_vs_elev2_indiv_pvals.csv")
##########################################################
library(tidyverse)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Elevated Day 0 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/elev0_vs_elev2_indiv_pvals.csv")
# Elevated Day 0 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/elev0_vs_elev2_indiv_pvals.csv")
library(ape)
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
# Edit these to match your data file names:
input="elev0_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="elev0_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.05, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.01, # FDR cutoff to print in regular (not italic) font.
level3=0.001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts")
#### Loading Libraries -------------------------------
library(apeglm)
library(DESeq2)
library(tidyverse)
library(VennDiagram)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# AMBIENT DAY 0 VS. AMBIENT DAY 2, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(0, 0, 0,
2, 2, 2)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",)))
# AMBIENT DAY 0 VS. AMBIENT DAY 2, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(0, 0, 0,
2, 2, 2)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb0_vs_amb2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb0_vs_amb2_indiv",
variable = "day")
# AMBIENT DAY 0 VS. AMBIENT DAY 17, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(0, 0, 0,
17, 17, 17)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb0_vs_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb0_vs_amb17_indiv",
variable = "day")
# AMBIENT DAY 2 VS. AMBIENT DAY 17, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(2, 2, 2,
17, 17, 17)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
# AMBIENT DAY 0 VS. AMBIENT DAY 2, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(0, 0, 0,
2, 2, 2)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb0_vs_amb2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb0_vs_amb2_indiv",
variable = "day")
# AMBIENT DAY 0 VS. AMBIENT DAY 17, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(0, 0, 0,
17, 17, 17)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb0_vs_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb0_vs_amb17_indiv",
variable = "day")
# AMBIENT DAY 2 VS. AMBIENT DAY 17, INDIVIDUAL LIBRARIES ONLY
# Order should match columns of Kallisto output matrix created by Trinity (kallisto.isoform.counts.matrix)
exp_design <- data.frame(day = factor(c(2, 2, 2,
17, 17, 17)),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb2_vs_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb2_vs_amb17_indiv",
variable = "day")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb2_indiv_DEG_IDs.txt")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb2_indiv_DEG_IDs.txt")
#### Loading Libraries -------------------------------
library(apeglm)
library(DESeq2)
library(tidyverse)
library(VennDiagram)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb2_indiv_DEG_IDs.txt")
# Ambient Day 0 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb17_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb17_indiv_DEG_IDs.txt")
# Ambient Day 2 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_amb17_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb2_vs_amb17_indiv_DEG_IDs.txt")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt")
# Ambient Day 0 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb17_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0_vs_amb17_indiv_All_GeneIDs.txt")
# Ambient Day 2 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb2_vs_amb17_indiv_All_GeneIDs.txt")
# Ambient Day 0 vs. Ambient Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt")
# Ambient Day 0 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0_vs_amb17_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb17_indiv_All_GeneIDs.txt")
# Ambient Day 2 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_amb17_indiv_All_GeneIDs.txt")
uniprot_to_GO <- function(accession_path, swissprot_path, output_path) {
# Read in file of accession IDs
accessionIDs <- read.table(file = accession_path,
header = FALSE,
col.names = "accessionID")
# Read in uniprot data table containing all GO terms
uniprot_info <- read.delim(file = swissprot_path,
header = TRUE,
fill = TRUE,
sep = '\t')
# Rename first column
colnames(uniprot_info)[1] <- "accessionID"
# Left join
all_terms <- left_join(accessionIDs, uniprot_info, by = "accessionID")
# See how many unmatched terms we have
sum(is.na(all_terms$Gene.ontology.IDs))
# Select those unmatched terms, assign them to a new table
unmatched_terms <- all_terms[is.na(all_terms$Gene.ontology.IDs),]
# Remove all unmatched terms from main table
all_terms <- all_terms[!is.na(all_terms$Gene.ontology.IDs),]
# Select only accession IDs and GO IDs in new table
GO_terms <- all_terms %>%
select(accessionID, Gene.ontology.IDs)
write.table(x = GO_terms, file = output_path, sep = "\t",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
}
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path <- "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GOIDs.txt")
# Compare
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GOIDs.txt")
source(hematodinium_analysis_functions)
source("hematodinium_analysis_functions.r")
source("hematodinium_analysis_functions.R")
# Ambient Day 0 vs. Ambient Day 2
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb2_indiv_All_GOIDs.txt")
# Ambient Day 0 vs. Ambient Day 17. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb17_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb0_vs_amb17_indiv_All_GOIDs.txt")
# Ambient Day 2 vs. Ambient Day 17. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_amb17_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_amb17_indiv_All_GOIDs.txt")
# Ambient Day 0 vs. Ambient Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/amb0_vs_amb2_indiv_pvals.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient Day 0 vs. Ambient Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/amb0_vs_amb2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/amb0_vs_amb2_indiv_pvals.csv")
# Ambient Day 0 vs. Ambient Day 17, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/amb0_vs_amb17_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/amb0_vs_amb17_indiv_pvals.csv")
# Ambient Day 2 vs. Ambient Day 17, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/amb2_vs_amb17_indiv_pvals.csv")
library(ape)
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
# Edit these to match your data file names:
input="amb0_vs_amb2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
# Edit these to match your data file names:
input="amb0_vs_amb2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amb0_vs_amb2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
library(ape)
windows()
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
i
# Edit these to match your data file names:
input="elev0_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="elev0_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
detach("package:ape", unload = TRUE)
detach("package:apeglm", unload = TRUE)
detach("package:Biobase", unload = TRUE)
detach("package:BiocGenerics", unload = TRUE)
detach("package:DESeq2", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:futile.logger", unload = TRUE)
detach("package:GenomeInfoDb", unload = TRUE)
detach("package:GenomicRanges", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:IRanges", unload = TRUE)
detach("package:MatrixGenerics", unload = TRUE)
detach("package:matrixStats", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:SummarizedExperiment", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:VennDiagram", unload = TRUE)
detach("package:vsn", unload = TRUE)
library(ape)
# Edit these to match your data file names:
input="amb0_vs_amb2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amb0_vs_amb2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
