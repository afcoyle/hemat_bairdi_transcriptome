# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Compare day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Install packages
install.packages("dichromat")
# Install packages
?require()
# Install packages
require(dichromat)
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("../input_for_GO-MWU/Amb_bsLow_day02.csv")
getwd()
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_bsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
View(geneBackground)
View(geneBackground)
head(geneBackground)
# Import 2-col table of gene IDs and GO terms
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt")
View(uniprotGOTerms)
# Import 2-col table of gene IDs and GO terms
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt",
header = FALSE)
View(uniprotGOTerms)
View(geneBackground)
# Rename columns
colnames(uniprotGOterms) <- c("Uniprot", "GO")
# Rename columns
colnames(uniprotGOTerms) <- c("Uniprot", "GO")
View(uniprotGOTerms)
#Confirm import
head(uniprotGOTerms)
View(uniprotGOTerms)
knitr::opts_chunk$set(echo = TRUE)
geneBackground <- read.csv("../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Confirm import
head(geneBackground)
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt",
header = FALSE)
# Rename columns
colnames(uniprotGOTerms) <- c("Uniprot", "GO")
#Confirm import
head(uniprotGOTerms)
View(geneBackground)
View(uniprotGOTerms)
View(geneBackground)
# Rename columns
colnames(geneBackground) <- c("Uniprot", "pvalue")
# Confirm import
head(geneBackground)
geneBackgroundGOterms <- merge(x = geneBackground,
y = uniprotGOTerms,
by = "Uniprot")
View(geneBackgroundGOterms)
rm(geneBackgroundGOterms)
geneBackgroundGOterms <- merge(x = geneBackground,
y = uniprotGOTerms,
by = "Uniprot")
head(geneBackgroundGOterms)
getwd()
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd(07_running_GO-MWU)
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("07_running_GO-MWU")
getwd()
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
library(ape)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="day0_day17_ambpvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="day0_day17_amb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="../../output/input_for_GO-MWU/day0_day17_ambpvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="../../output/input_for_GO-MWU/day0_day17_amb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="../../output/input_for_GO-MWU/day0_day17_ambpvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="../../output/input_for_GO-MWU/day0_day17_amb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="day0_day17_ambpvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="day0_day17_amb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Elev_vsAmb_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Elev_vsAmb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
quartz()
library(ape)
quartz()
quartz(
windows()
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
windows()
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Edit these to match your data file names:
input="Elev_vsAmb_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Elev_vsAmb_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# Edit these to match your data file names:
input="Elev_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Elev_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# Edit these to match your data file names:
input="Elev_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Elev_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
library(ape)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Day and temperature data for libraries
# 178, 118, 132, 359, 349, 334, 272, 294, 280 (in order)
# Order should match columns of Kallisto output matrix created by Trinity
exp_design <- data.frame(day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)),
temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")))
View(exp_design)
#### Loading Libraries -------------------------------
library(apeglm)
library(DESeq2)
library(tidyverse)
library(VennDiagram)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
deseq_analysis(kallisto_path = "../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only",
variable = as.formula("temp"))
# Day and temperature data for libraries
# 178, 118, 132, 359, 349, 334, 272, 294, 280 (in order)
# Order should match columns of Kallisto output matrix created by Trinity
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2))
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)),
temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")))
# Day and temperature data for libraries
# 178, 118, 132, 359, 349, 334, 272, 294, 280 (in order)
# Order should match columns of Kallisto output matrix created by Trinity
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only",
variable = as.formula("temp"))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only",
variable = as.formula("temp"))
test <- as.formula("temp")
test <- as.formula("temp")
test <- as.formula("temp")
as.formula("temp")
test <- as.formula(paste(temp))
test <- as.formula(paste("temp"))
test <- as.formula("temp")
?as.formula
deseq_analysis(kallisto_path = "../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only",
variable = "temp")
# For testing, select first 100 lines of data
data[1]
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table("../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
header = TRUE, sep = "\t")
# For testing, select first 100 lines of data
data[1]
# For testing, select first 100 lines of data
data[1,]
# For testing, select first 100 lines of data
data[1:100,]
# For testing, select first 100 lines of data
data <- data[1:100,]
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
head(data)
str(data)
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Day and temperature data for libraries
# 118, 132, 178, 463, 481, 485 (in order)
deseq2.colData <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
# Day and temperature data for libraries
# 118, 132, 178, 463, 481, 485 (in order)
deseq2.colData <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)))
# Day and temperature data for libraries
# 118, 132, 178, 463, 481, 485 (in order)
deseq2.colData <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)))
# Rename rows to correspond to library numbers
rownames(deseq2.colData) <- colnames(data)
# Check that it looks alright
deseq2.colData
# Create DESeq object that looks at effect of day
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = deseq2.colData,
design = ~ temp)
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
deseq2.res
summary(deseq2.res)
# Shrink LFC estimates - used in some but not all analyses
resultsNames(deseq2.dds)
resLFC <- lfcShrink(deseq2.dds, coef = "day_17_vs_0",
type = "apeglm")
# Shrink LFC estimates - used in some but not all analyses
resultsNames(deseq2.dds)
resLFC <- lfcShrink(deseq2.dds, coef = "day_17_vs_0",
type = "apeglm")
resLFC
resLFC <- lfcShrink(deseq2.dds, coef = "temp",
type = "apeglm")
resLFC
# Dimensions of non-NA results with an adjusted p-value of <= 0.05
dim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])
# Sum of non-NA results w/ adjusted p-values less than 0.1
sum(deseq2.res$padj < 0.1, na.rm = TRUE)
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
print("Number of DEGs (padj <= 0.05)")
print(sum(deseq_res05$padj < 0.05, na.rm = TRUE))
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
# Plot PCA of samples
# Transform values
vsd <- vst(deseq2.dds, blind = FALSE)
head(assay(vsd), 3)
# Create plot
plotPCA(vsd, intgroup = "day")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Day and temperature data for libraries
# 178, 118, 132, 359, 349, 334, 272, 294, 280 (in order)
# Order should match columns of Kallisto output matrix created by Trinity
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/elev2_vs_amb02_indiv_only/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only",
variable = "temp")
# Day and temperature data for libraries
# 178, 359, 463, 118, 349, 481, 132, 334, 485, 151, 173, 072,
# 127, 380821, 272, 294, 280, 380825 (in order)
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb",
"Amb", "Amb", "Amb",
"Amb", "Amb", "Amb",
"Amb", "Amb", "Amb",
"Amb", "Amb", "Elev",
"Elev", "Elev", "Elev")),
day = factor(c(0, 2, 17,
0, 2, 17,
0, 2, 17,
0, 0, 0,
0, 2, 2,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb0217_elev0_low0_vs_elev2/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb0217_elev0_low0_vs_elev2",
variable = "temp")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Ambient Day 0+2+17 + Elevated Day 0 + Lowered Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0217_elev0_low0_vs_elev2/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb0217_elev0_low0_vs_elev2_DEG_IDs.txt")
# Get all gene IDs for all genes, not just DEGs
# Ambient vs. Low Temperature
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/allgenes_IDs/elev2_vs_amb02_indiv_only_All_GeneIDs.txt")
# Ambient Day 0+2+17 + Elevated Day 0 + Lowered Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb0217_elev0_low0_vs_elev2/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/amb0217_elev0_low0_vs_elev2_All_GeneIDs.txt")
