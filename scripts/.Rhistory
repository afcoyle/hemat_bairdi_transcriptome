TPM_file <- read.delim(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
View(amb_elev)
View(TPM_file)
# Remove only the first column
amb_elev <- amb_elev[,1]
# Read in differentially-expressed transcript IDs
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove only the first column
amb_elev <- amb_elev[,1, drop = FALSE]
View(amb_elev)
# Change column name
colnames(amb_elev) <- "Transcript_ID"
View(amb_elev)
View(TPM_file)
View(amb_elev)
library(tidyverse)
# Left join TPM file to transcript data
TPM_file <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
View(TPM_file)
# Select only entries with a non-NA value for gene ID
TPM_file <- !is.na(TPM_file)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
TPM_file <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
TPM_file <- TPM_file[!is.na(TPM_file),]
View(TPM_file)
View(amb_elev)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(TPM_file),]
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(TPM_file$Gene_ID),]
amb_elev[!is.na(TPM_file$Gene_ID),]
# Select only DEGs with transcript IDs that match to genes
amb_elev <- amb_elev[!is.na(amb_elev$Gene_ID),]
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Left join TPM file to transcript data
amb_elev <- left_join(amb_elev, TPM_file, by = "Transcript_ID")
# Select only entries with a non-NA value for gene ID
amb_elev <- amb_elev[!is.na(amb_elev$Gene_ID),]
View(amb_elev)
View(amb_elev)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
fill = TRUE,
sep = "\t")
View(DEG_list)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
View(blast_data)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(blast_data)
View(DEG_list)
View(blast_data)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
View(DEG_list)
# Read in differentially-expressed transcript IDs
# that have been BLASTed against Alveolata nucleotide
# sequences
amb_elev <- read.delim(file = "../output/BLASTn/alveolata/amb2_vs_elev2.tab",
header = FALSE,
fill = TRUE,
sep = "\t")
# Remove all but the first column
amb_elev <- amb_elev[,1, drop = FALSE]
# Change column name
colnames(amb_elev) <- "Transcript_ID"
# Read in our TPM file, which contains transcript IDs and gene IDs
TPM_file <- read.table(file = "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt",
header = TRUE)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
# Specify file you want to write results to
outpath <- "../output/TPM_counts/elev0_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
View(DEG_match)
rmarkdown::render(output_dir="knitted_rmd")
rmarkdown::render(input="02_kallisto_to_deseq_to_accessionIDs.Rmd, output_dir="knitted_rmd")
rmarkdown::render(input="02_kallisto_to_deseq_to_accessionIDs.Rmd, output_dir=knitted_rmd)
rmarkdown::render(input = 02_kallisto_to_deseq_to_accessionIDs.Rmd, output_dir = knitted_rmd)
rmarkdown::render(02_kallisto_to_deseq_to_accessionIDs.Rmd, encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
knitr::opts_chunk$set(echo = TRUE)
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb", "Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2, 2, 2, 2)))
exp_design
exp_design <- data.frame(temp = factor(c("Low", "Amb", "Elev")),
day = factor(c(0, 2, 17)))
exp_design
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")\
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("02_kallisto_to_deseq_to_accessionIDs.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("03_uniprot_to_GO_method1.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("03_uniprot_to_GO_method1.Rmd", encoding = encoding, output_dir = "knitted_rmd")
rmarkdown::render("05_GO-MWU_prep.Rmd", encoding = encoding, output_dir = "knitted_rmd")
knitr::opts_chunk$set(echo = TRUE)
read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab")
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab")
elev0_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/elev0_vs_elev2.tab")
amb2_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/amb2_vs_elev2.tab")
elev0_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/elev0_vs_elev2.tab")
outfmt6 <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab",
header = outfmt6)
?read.table
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
View(amb2_elev2_alveolata)
elev0_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
amb2_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
View(amb2_elev2_alveolata)
View(elev0_elev2_alveolata)
# Filter by e-value (bar = 10)
eval <- 10^(-2)
# Filter by e-value (bar = 10)
eval <- 10^(-3)
sum(amb2_elev2_alveolata$evalue <= eval)
# Filter by e-value (bar = 10)
eval <- 10^(-4)
sum(amb2_elev2_alveolata$evalue <= eval)
sum(amb2_elev2_arthropoda$evalue <= eval)
sum(elev0_elev2_alveolata$evalue <= eval)
sum(elev0_elev2_arthropoda$evalue <= eval)
View(amb2_elev2_alveolata)
amb2_elev2 <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
View(amb2_elev2)
library(tidyverse)
amb2_elev2 <- amb2_elev2[order(amb2_elev2[, "qseqid"], -amb2_elev2[, "evalue"])]
amb2_elev2 <- amb2_elev2[order(amb2_elev2[ ,"qseqid"], -amb2_elev2[ ,"evalue"])]
View(amb2_elev2)
amb2_elev2 <- amb2_elev2[order(amb2_elev2[ ,"qseqid"], -amb2_elev2[ ,3])]
amb2_elev2 <- amb2_elev2[order(amb2_elev2[ ,"evalue"])]
amb2_elev2 <- amb2_elev2[order(amb2_elev2[ ,"qseqid"], -amb2_elev2[ ,3]),]
View(amb2_elev2)
amb2_elev2[!duplicated(amb2_elev2$qseqid),]
amb2_elev2[duplicated(amb2_elev2$qseqid),]
amb2_elev2 <- amb2_elev2[order(amb2_elev2[ ,"qseqid"], -amb2_elev2[ ,"evalue"]),]
View(amb2_elev2)
amb2_elev2[duplicated(amb2_elev2$qseqid),]
amb2_elev2 <- amb2_elev2[!duplicated(amb2_elev2$qseqid),]
View(amb2_elev2)
outfmt6 <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
amb2_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
# Filter by e-value (bar = 10)
eval <- 10^(-4)
sum(amb2_elev2_alveolata$evalue <= eval)
sum(amb2_elev2_arthropoda$evalue <= eval)
sum(elev0_elev2_alveolata$evalue <= eval)
sum(elev0_elev2_arthropoda$evalue <= eval)
amb2_elev2_alv <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
amb2_elev2_alv <- amb2_elev2_alv[order(amb2_elev2_alv[ ,"qseqid"], -amb2_elev2_alv[ ,"evalue"]),]
amb2_elev2_alv <- amb2_elev2_alv[!duplicated(amb2_elev2_alv$qseqid),]
# Doing the same to arthropoda
amb2_elev2_arth <- amb2_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
amb2_elev2_arth <- amb2_elev2_arth[order(amb2_elev2_arth[ ,"qseqid"], -amb2_elev2_arth[ ,"evalue"]),]
amb2_elev2_arth <- amb2_elev2_arth[!duplicated(amb2_elev2_arth$qseqid),]
# Left join the two tables
amb2_elev2 <- left_join(amb2_elev2_alv, amb2_elev2_arth, by = "qseqid")
View(amb2_elev2)
colnames(amb2_elev2_alv$evalue) <- "alv_eval"
colnames(amb2_elev2_alv)[3] <- "alv_eval"
View(amb2_elev2_alv)
colnames(amb2_elev2_arth)[3] <- "arth_eval"
View(amb2_elev2_arth)
# Left join the two tables
amb2_elev2 <- left_join(amb2_elev2_alv, amb2_elev2_arth, by = "qseqid")
View(amb2_elev2)
sum(amb2_elev2$alv_eval > amb2_elev2$arth_eval)
as.numeric(amb2_elev2$alv_eval > amb2_elev2$arth_eval)
sum(as.numeric(amb2_elev2$alv_eval > amb2_elev2$arth_eval))
sum(as.numeric(amb2_elev2$alv_eval > amb2_elev2$arth_eval), na.rm = TRUE)
sum(as.numeric(amb2_elev2$alv_eval < amb2_elev2$arth_eval), na.rm = TRUE)
amb2_elev2_alv <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
amb2_elev2_alv <- amb2_elev2_alv[order(amb2_elev2_alv[ ,"qseqid"], -amb2_elev2_alv[ ,"evalue"]),]
amb2_elev2_alv <- amb2_elev2_alv[!duplicated(amb2_elev2_alv$qseqid),]
amb2_elev2_alv <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
amb2_elev2_alv <- amb2_elev2_alv[order(amb2_elev2_alv[ ,"qseqid"], -amb2_elev2_alv[ ,"evalue"]),]
amb2_elev2_alv <- amb2_elev2_alv[!duplicated(amb2_elev2_alv$qseqid),]
colnames(amb2_elev2_alv)[3] <- "alv_eval"
# Doing the same to arthropoda
amb2_elev2_arth <- amb2_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
amb2_elev2_arth <- amb2_elev2_arth[order(amb2_elev2_arth[ ,"qseqid"], -amb2_elev2_arth[ ,"evalue"]),]
amb2_elev2_arth <- amb2_elev2_arth[!duplicated(amb2_elev2_arth$qseqid),]
colnames(amb2_elev2_arth)[3] <- "arth_eval"
# Left join the two tables
amb2_elev2 <- left_join(amb2_elev2_alv, amb2_elev2_arth, by = "qseqid")
sum(as.numeric(amb2_elev2$alv_eval < amb2_elev2$arth_eval), na.rm = TRUE)
sum(as.numeric(amb2_elev2$alv_eval > amb2_elev2$arth_eval), na.rm = TRUE)
elev0_elev2_alv <- elev0_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
elev0_elev2_alv <- elev0_elev2_alv[order(elev0_elev2_alv[ ,"qseqid"], -elev0_elev2_alv[ ,"evalue"]),]
elev0_elev2_alv <- elev0_elev2_alv[!duplicated(elev0_elev2_alv$qseqid),]
colnames(elev0_elev2_alv)[3] <- "alv_eval"
# Doing the same to arthropoda
elev0_elev2_arth <- elev0_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
elev0_elev2_arth <- elev0_elev2_arth[order(elev0_elev2_arth[ ,"qseqid"], -elev0_elev2_arth[ ,"evalue"]),]
elev0_elev2_arth <- elev0_elev2_arth[!duplicated(elev0_elev2_arth$qseqid),]
colnames(elev0_elev2_arth)[3] <- "arth_eval"
# Left join the two tables
elev0_elev2 <- left_join(elev0_elev2_alv, elev0_elev2_arth, by = "qseqid")
sum(as.numeric(elev0_elev2$alv_eval > elev0_elev2$arth_eval), na.rm = TRUE)
elev0_elev2_alv <- elev0_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
elev0_elev2_alv <- elev0_elev2_alv[order(elev0_elev2_alv[ ,"qseqid"], -elev0_elev2_alv[ ,"evalue"]),]
elev0_elev2_alv <- elev0_elev2_alv[!duplicated(elev0_elev2_alv$qseqid),]
colnames(elev0_elev2_alv)[3] <- "alv_eval"
# Doing the same to arthropoda
elev0_elev2_arth <- elev0_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
elev0_elev2_arth <- elev0_elev2_arth[order(elev0_elev2_arth[ ,"qseqid"], -elev0_elev2_arth[ ,"evalue"]),]
elev0_elev2_arth <- elev0_elev2_arth[!duplicated(elev0_elev2_arth$qseqid),]
colnames(elev0_elev2_arth)[3] <- "arth_eval"
# Left join the two tables
elev0_elev2 <- left_join(elev0_elev2_alv, elev0_elev2_arth, by = "qseqid")
sum(as.numeric(elev0_elev2$alv_eval > elev0_elev2$arth_eval), na.rm = TRUE)
sum(as.numeric(elev0_elev2$alv_eval < elev0_elev2$arth_eval), na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
outfmt6 <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
amb2_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
# Filter by e-value (bar = 10)
eval <- 10^(-4)
sum(amb2_elev2_alveolata$evalue <= eval)
sum(amb2_elev2_arthropoda$evalue <= eval)
sum(elev0_elev2_alveolata$evalue <= eval)
sum(elev0_elev2_arthropoda$evalue <= eval)
# Create table with transcript IDs and e-values for both alveolata and arthropoda
# First, remove duplicate transcript IDs, keeping the one with the highest e-value
amb2_elev2_alv <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
library(tidyverse)
outfmt6 <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
amb2_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_alveolata <- read.table(file = "../output/BLASTn/alveolata_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
amb2_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/amb2_vs_elev2.tab",
col.names = outfmt6)
elev0_elev2_arthropoda <- read.table(file = "../output/BLASTn/arthropoda_publicseqs/elev0_vs_elev2.tab",
col.names = outfmt6)
# Filter by e-value (bar = 10)
eval <- 10^(-4)
sum(amb2_elev2_alveolata$evalue <= eval)
sum(amb2_elev2_arthropoda$evalue <= eval)
sum(elev0_elev2_alveolata$evalue <= eval)
sum(elev0_elev2_arthropoda$evalue <= eval)
# Create table with transcript IDs and e-values for both alveolata and arthropoda
# First, remove duplicate transcript IDs, keeping the one with the highest e-value
amb2_elev2_alv <- amb2_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
amb2_elev2_alv <- amb2_elev2_alv[order(amb2_elev2_alv[ ,"qseqid"], -amb2_elev2_alv[ ,"evalue"]),]
amb2_elev2_alv <- amb2_elev2_alv[!duplicated(amb2_elev2_alv$qseqid),]
# Rename evalue column for ID post-join
colnames(amb2_elev2_alv)[3] <- "alv_eval"
# Doing the same to arthropoda
amb2_elev2_arth <- amb2_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
amb2_elev2_arth <- amb2_elev2_arth[order(amb2_elev2_arth[ ,"qseqid"], -amb2_elev2_arth[ ,"evalue"]),]
amb2_elev2_arth <- amb2_elev2_arth[!duplicated(amb2_elev2_arth$qseqid),]
# Rename evalue column for ID post-join
colnames(amb2_elev2_arth)[3] <- "arth_eval"
# Left join the two tables
amb2_elev2 <- left_join(amb2_elev2_alv, amb2_elev2_arth, by = "qseqid")
sum(as.numeric(amb2_elev2$alv_eval > amb2_elev2$arth_eval), na.rm = TRUE)
#####################################
# Do the same for comparing Elevated Day 0/2
#####################################
elev0_elev2_alv <- elev0_elev2_alveolata %>%
select(qseqid, sseqid, evalue)
elev0_elev2_alv <- elev0_elev2_alv[order(elev0_elev2_alv[ ,"qseqid"], -elev0_elev2_alv[ ,"evalue"]),]
elev0_elev2_alv <- elev0_elev2_alv[!duplicated(elev0_elev2_alv$qseqid),]
# Rename evalue column for ID post-join
colnames(elev0_elev2_alv)[3] <- "alv_eval"
# Doing the same to arthropoda
elev0_elev2_arth <- elev0_elev2_arthropoda %>%
select(qseqid, sseqid, evalue)
elev0_elev2_arth <- elev0_elev2_arth[order(elev0_elev2_arth[ ,"qseqid"], -elev0_elev2_arth[ ,"evalue"]),]
elev0_elev2_arth <- elev0_elev2_arth[!duplicated(elev0_elev2_arth$qseqid),]
# Rename evalue column for ID post-join
colnames(elev0_elev2_arth)[3] <- "arth_eval"
# Left join the two tables
elev0_elev2 <- left_join(elev0_elev2_alv, elev0_elev2_arth, by = "qseqid")
sum(as.numeric(elev0_elev2$alv_eval < elev0_elev2$arth_eval), na.rm = TRUE)
sum(as.numeric(elev0_elev2$alv_eval < elev0_elev2$arth_eval), na.rm = TRUE)
sum(as.numeric(elev0_elev2$alv_eval > elev0_elev2$arth_eval), na.rm = TRUE)
