dynamicMergeCut(9)
MEDissThres <- dynamicMergeCut(3)
abline(h = MEDissThres, col = "red")
# Count the number of genes and samples
nGenes <- ncol(CrabExpr0)
nSamples <- nrow(CrabExpr0)
# Recalculate MEs with color labels, order MEs based on MEs0
MEs0 <- moduleEigengenes(CrabExpr0, moduleColors)$eigengenes
# Extract merged colors and eigengenes
mergedColors <- merge$colors
merge <- mergeCloseModules(CrabExpr0, dynamicColors,
cutHeight = MEDissThres,
verbose = 3)
# Extract merged colors and eigengenes
mergedColors <- merge$colors
mergedMEs <- merge$newMEs
# Plot dendrogram with original and merged eigengenes
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
moduleColors <- mergedColors
colorOrder <- c("grey", standardColors(50)) # Determine color order
moduleLabels <- match(moduleColors, colorOrder)-1 # Construct numerical labels based on colors
MEs <- mergedMEs # Replace unmerged MEs
# Count the number of genes and samples
nGenes <- ncol(CrabExpr0)
nSamples <- nrow(CrabExpr0)
# Recalculate MEs with color labels, order MEs based on MEs0
MEs0 <- moduleEigengenes(CrabExpr0, moduleColors)$eigengenes
MEs <- orderMEs(MEs0)
# Calculate trait correlations and obtain p-values
moduleTraitCor <- cor(MEs, crabTraits, use = "p")
MEs <- orderMEs(MEs0)
crabTraits
View(crabTraits)
as.numeric(crabTraits)
# Calculate trait correlations and obtain p-values
moduleTraitCor <- cor(MEs, crabClinicalData, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix)
moduleTraitPvalue
library(tidyverse)
library(WGCNA)
library(DESeq2)
# Path to kallisto libraries
kallisto_path <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Libraries we want to read in to our TPM matrix
libraries <- c("178", "118", "132", "359", "349", "334", "463", "481", "485")
# For each row, crab and day should correspond to the order of libraries (ex: 4th row of crabTraits should match libraries[4])
crabTraits <- data.frame("crab" = rep(c("A", "B", "C"), times = 3),
"day" = factor(c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3))))
# Create clinical data trait matrix. Same rules as above, but both crab and day are numeric. Crab A will be noted as 1, B as 2, and C as 3
crabClinicalData <- data.frame("crab" = rep(c(1, 2, 3), times = 3),
"day" = c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3)))
# Create character vector with all filenames for our libraries
kallisto_files <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# Read first kallisto file in to start data frame
TPMcounts <- read.delim(file = kallisto_files[1],
header = TRUE,
sep = "\t")
# Eliminate all columns except transcript ID and TPM
TPMcounts <- TPMcounts %>%
select(target_id, tpm)
# Rename columns for consistency and to ID TPM counts
colnames(TPMcounts)[1:2] <- c("Transcript_ID",
paste0("id", libraries[1], "_TPM"))
# Loop through remaining kallisto files, performing full joins to the kallisto file we read in
for (i in 2:length(kallisto_files)){
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names to give ID to count column
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
# Perform full join, keeping all transcript IDs
TPMcounts <- full_join(TPMcounts, kallisto_output, by = "Transcript_ID")
}
# Create logical matrix for whole dataframe, comparing values to 10
# Move transcript ID to rownames
TPMcounts <- TPMcounts %>%
column_to_rownames(var = "Transcript_ID")
# Get initial dimensions of data frame
dim(TPMcounts)
# Filter out all variables with no counts greater than 80. Should be 10, but testing if this works
TPMcounts <- TPMcounts %>%
filter_all(any_vars(. > 30))
# See how many transcripts we have left
dim(TPMcounts)
# Round all counts to the nearest integer
TPMcounts <- round(TPMcounts, digits = 0)
# Normalize raw counts with DESeq()
crab.dds <- DESeqDataSetFromMatrix(countData = TPMcounts,
colData = crabTraits,
design = ~day)
crab.dds <- DESeq(crab.dds)
# Perform vst on DESeq object
vsd <- getVarianceStabilizedData(crab.dds)
# Transpose dataframe to format for WGCNA
CrabExpr0 <- as.data.frame(t(vsd))
# Check dataframe was transposed correctly
dim(CrabExpr0)
# Check for genes and samples with too many missing values
gsg <- goodSamplesGenes(CrabExpr0, verbose = 3)
gsg$allOK      # should return TRUE if all genes pass test
sampleTree <- hclust(dist(CrabExpr0), method = "average")
plot(sampleTree)
# Print the crabTraits matrix we made earlier
head(crabTraits)
# Use same rownames as expression data to create analogous  matrix
rownames(crabTraits) <- rownames(CrabExpr0)
# Make sure it looks good
head(crabTraits)
# Create a dendrogram to look at sample and trait clustering
sampleTree2 <- hclust(dist(CrabExpr0), method = "average")
traitColors <- numbers2colors(crabClinicalData, signed = FALSE)
# Plot dendrogram
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(crabTraits))
softPower <- 9
adjacency <- adjacency(CrabExpr0, power = softPower)
# Minimize noise and spurious associations by transforming adjacency into TOM
TOM <- TOMsimilarity(adjacency)
#Calculate dissimilarity matrix
dissTOM <- 1 - TOM
# Clustering using TOM
# Create hierarchical clustering object
geneTree <- hclust(as.dist(dissTOM), method = "average")
# Plot initial dendrogram. Dissimilarity is based on topological overlap
plot(geneTree, xlab = "", sub = "",
main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE,
hang = 0.04)
# Set minimum module size, AKA num of genes that need to be in a module. Here, using WGCNA default
minModuleSize <- 30
# Cut branches of dendrogram to ID WGCNA modules
dynamicMods <- cutreeDynamic(dendro =  geneTree,
distM = dissTOM,
deepSplit = 2,
pamRespectsDendro = FALSE,
minClusterSize = minModuleSize)
# Look at table of modules
table(dynamicMods)
# Convert module numbers into colors
dynamicColors <- labels2colors(dynamicMods)
# Plot dendrogram with module colors
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(crabTraits))
# Calculate eigengenes
MElist <- moduleEigengenes(CrabExpr0, colors = dynamicColors)
# Save eigengenes as new object
MEs <- MElist$eigengenes
# Calculate dissimilarity of eigengenes
MEDiss <- 1-cor(MEs)
# Create cluster object
METree <- hclust(as.dist(MEDiss), method = "average")
# Plot dendrogram of clustered eigengenes
plot(METree, main = "Clustering of module eigengenes",
xlab = "",
sub = "")
# ID cut height based on sample number (3)
dynamicMergeCut(9)
MEDissThres <- dynamicMergeCut(3)
abline(h = MEDissThres, col = "red")
merge <- mergeCloseModules(CrabExpr0, dynamicColors,
cutHeight = MEDissThres,
verbose = 3)
# Extract merged colors and eigengenes
mergedColors <- merge$colors
mergedMEs <- merge$newMEs
# Plot dendrogram with original and merged eigengenes
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
# Rename and save variables for subsequent analysis
moduleColors <- mergedColors
colorOrder <- c("grey", standardColors(50)) # Determine color order
moduleLabels <- match(moduleColors, colorOrder)-1 # Construct numerical labels based on colors
MEs <- mergedMEs # Replace unmerged MEs
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05)
plot(METree, main = "Clustering of module eigengenes",
xlab = "",
sub = "")
# ID cut height based on sample number (3)
dynamicMergeCut(9)
MEDissThres <- dynamicMergeCut(3)
abline(h = MEDissThres, col = "red")
# Count the number of genes and samples
nGenes <- ncol(CrabExpr0)
nSamples <- nrow(CrabExpr0)
# Recalculate MEs with color labels, order MEs based on MEs0
MEs0 <- moduleEigengenes(CrabExpr0, moduleColors)$eigengenes
MEs <- orderMEs(MEs0)
# Calculate trait correlations and obtain p-values
moduleTraitCor <- cor(MEs, crabClinicalData, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
moduleTraitPvalue
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix)
signif(moduleTraitCor, 2)
textMatrix
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1),
dim(textMatrix) <- dim(moduleTraitCor)
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) == dim(moduleTraitCor)
textMatrix
dim(textMatrix)
signif(moduleTraitCor, 2)
# Create text matrix for correlations and their p-values
textMatrix <- as.dataframe(paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = ""))
# Create text matrix for correlations and their p-values
textMatrix <- as.data.frame(paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = ""))
textMatrix
View(textMatrix)
# Create text matrix for correlations and their p-values
textMatrix <- as.data.frame(paste(signif(moduleTraitCor, 2), "\n",
signif(moduleTraitPvalue, 1), sep = ""))
textMatrix
View(textMatrix)
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
# Create text matrix for correlations and their p-values
textMatrix <- as.data.frame(signif(moduleTraitCor, 2), moduleTraitPvalue, 1), sep = "")
# Create text matrix for correlations and their p-values
textMatrix <- as.data.frame(signif(moduleTraitCor, 2), signif(moduleTraitPvalue, 1), sep = "")
textMatrix
View(textMatrix)
dim(textMatrix) == dim(moduleTraitCor)
# Create labeled heat map
par(mar = c(4, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
maine = paste("Module-Treatment relationships"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-Treatment relationships"))
par(mar = c(4, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-Treatment relationships"))
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
# Ensure matrix has same dimensions
dim(textMatrix) == dim(moduleTraitCor)
par(mar = c(4, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-Treatment relationships"))
par(mar = c(4, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-Treatment relationships"))
# Define "day" using information from trait matrix
day <- as.data.frame(crabTraits$day)
# Modify names
names(day) <- "day"
# Save module names without "ME" at beginning of each entry
modNames <- substr(names(MEs), 3, nchar(names(MEs)))
modNames
# Obtain gene significance statistics
geneTraitSignificance <- as.data.frame(cor(CrabExpr0, day, use = "p"))
cor(CrabExpr0, day, use = "p")
day
View(day)
# Obtain gene significance statistics
geneTraitSignificance <- as.data.frame(cor(CrabExpr0, as.numeric(day), use = "p"))
# Define "day" using information from trait matrix
day <- as.data.frame(crabClinicalData$day)
# Modify names
names(day) <- "day"
# Save module names without "ME" at beginning of each entry
modNames <- substr(names(MEs), 3, nchar(names(MEs)))
# Obtain gene significance statistics
geneTraitSignificance <- as.data.frame(cor(CrabExpr0, as.numeric(day), use = "p"))
# Obtain gene significance statistics
geneTraitSignificance <- as.data.frame(cor(CrabExpr0, day, use = "p"))
# Add column names
names(geneTraitSignificance) <- paste("GS.", names(day), sep = "")
# Confirm formatting
head(geneTraitSignificance)
# Obtain p-values for each gene significance stat
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
# Add column names
names(GSPvalue) <- paste("p.GS", names(day), sep = "")
# Confirm formatting
head(GSPvalue)
# Obtain gene module membership stats
geneModuleMembership <- as.data.frame(cor(CrabExpr0, MEs, use = "p"))
# Add column names
names(geneModuleMembership) <- paste("MM", modNames, sep = "")
# Confirm formatting
head(geneModuleMembership)
# Obtain p-values for each module membership statistic
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
# Add column names
names(MMPvalue) <- paste("p.MM", modNames, sep = "")
# Confirm formatting
head(MMPvalue)
dim(MMPvalue)
# Save gene names as probes
probes <- names(CrabExpr0)
# Ending we want for each file and graph saved
file_ending <- "OnlyCtsOver30"
# Start and ending we want for each file and graph saved
file_start <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial"
# Create filename for this graph
filename <- paste0(file_start, "Cluster_Dendrogram", file_ending, ".png")
filename
plot(sampleTree)
# Create filename for this graph
filename <- paste0(file_start, "Cluster_Dendrogram", file_ending, ".png")
dev.print(png, filename)
plot(sampleTree)
gsg$allOK      # should return TRUE if all genes pass test
# Create filename for this graph
filename <- paste0(file_start, "Cluster_DendrogramTest", file_ending, ".png")
plot(1:10)
dev.print(png, filename)
plot(1:10)
dev.print(png, filename)
filename
# Start and ending we want for each file and graph saved
file_start <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/"
file_ending <- "OnlyCtsOver30"
# Create filename for this graph
filename <- paste0(file_start, "Cluster_DendrogramTest", file_ending, ".png")
filename
plot(1:10)
dev.print(png, filename)
knitr::opts_chunk$set(echo = TRUE, fig.path = "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver30")
plot(sampleTree)
plot(geneTree, xlab = "", sub = "",
main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE,
hang = 0.04)\
plot(geneTree, xlab = "", sub = "",
main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE,
hang = 0.04)
plot(METree, main = "Clustering of module eigengenes",
xlab = "",
sub = "")
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(crabTraits))
knitr::opts_chunk$set(echo = TRUE, fig.path = "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver30/")
# Start and ending we want for each file and graph saved. Should be same as fig.path in knitr header
file_start <- "../output/WGCNA_output/AmbCrabs_cbai_transcriptome_v2.0_trial/OnlyCtsOver30/"
paste(file_start, "GeneList-", module, ".txt", sep = "")
module <- "test"
paste(file_start, "GeneList-", module, ".txt", sep = "")
# Save gene names as probes
probes <- names(CrabExpr0)
# Write out the gene lists for each module of interest
for (module in modNames) {
modGenes <- (moduleColors == module) # Select module probes
modLLIDs <- probes[modGenes] # Get gene IDs
fileName <- paste(file_start, "GeneList-", module, ".txt", sep = "") # Assign filename for each module
write.table(as.data.frame(modLLIDs), file = fileName, sep = "\t", row.names = FALSE, col.names = FALSE) # Write out files
}
blastx_table_site <- "../data/cbai_hemat_diamond_blastx_table_trancsriptome_v2.0.fasta"
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
blastx_table_site <- "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.fasta"
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
# Location of blastx table
blastx_table_site <- "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt"
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
View(crabGeneAnnot)
View(crabGeneAnnot)
# Remove unnecessary columns
crabGeneAnnot <- crabGeneAnnot[, -c(3:10, 12)]
View(crabGeneAnnot)
# Name columns
colnames(crabGeneAnnot) <- c("seqIDs", "Uniprot", "e-value")
# Look at column formatting
head(crabGeneAnnot)
# If pipes in Uniprot ID column, separate to specifically get Uniprot ID
gene_ids <- dplyr::pull(crabGeneAnnot, Uniprot)
if(any(grepl("|", gene_ids, fixed = TRUE))) {
test <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
}
if(any(grepl("|", gene_ids, fixed = TRUE))) {
test <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
}
View(test)
View(test)
# If pipes in Uniprot ID column, separate to specifically get Uniprot ID, and then remove those new columns with species info
gene_ids <- dplyr::pull(crabGeneAnnot, Uniprot)
if(any(grepl("|", gene_ids, fixed = TRUE))) {
test <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
test <- test[,-c(2, 4)]
}
View(test)
if(any(grepl("|", gene_ids, fixed = TRUE))) {
crabGeneAnnot <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
crabGeneAnnot <- crabGeneAnnot[,-c(2, 4)]
}
