names(module)[1] <- "Transcript_ID"
# Create inner loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i],
"/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
# End of inner loop
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Transpose dataframe
module <- as.data.frame(t(module))
# Add column with our testedvar input
module$testedvar <- testedvar
# Use melt to pivot the table longer
module <- melt(module, id = "testedvar")
# Add column with crab IDs
module$crab <- rep(crabids)
# Concatenate new column with transcript IDs and crab IDs so each crab-gene forms a single line over time
module$variable <- str_c(module$crab, "_", module$variable)
# Use ggplot to graph non-log-transformed counts. NOTE: since we're inside a for loop, we need to explicitly print ggplot
path <- paste0(modulepath, outpath, "_module_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = value,
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Transcripts per million (TPM)"))
dev.off()
# Use ggplot to graph again, this time transforming our TPM counts
path <- paste0(modulepath, outpath, "_module_log_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
dev.off()
# Use ggplot to graph a third time, just so it shows up in our knitted .Rmd file
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
}
# Produce path to specific module file
moduleroute <- paste0(modulepath, modulefiles[3])
moduleroute
# Each module filename will be something like GeneList-color.txt. Remove the GeneList- and .txt portions so we can write files more easily
outpath <- str_remove(modulefiles[3], "GeneList-")
outpath <- str_remove(outpath, ".txt")
# Vector of all libraries included in module
crablibs <- as.character(c(173, 272, 072, 294, 127, 280))
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/cbai_transcriptome_v2.0/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module
crablibs <- as.character(c(173, 272, 072, 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Pull all files in folder containing modules
modulefiles <- list.files(modulepath)
# Select only files starting in GeneList- and ending in .txt
modulefiles <- str_subset(modulefiles, "^GeneList-[a-z]")
for (i in 1:length(modulefiles)) {
# Produce path to specific module file
moduleroute <- paste0(modulepath, modulefiles[i])
# Each module filename will be something like GeneList-color.txt. Remove the GeneList- and .txt portions so we can write files more easily
outpath <- str_remove(modulefiles[i], "GeneList-")
outpath <- str_remove(outpath, ".txt")
# Read in module data
module <- read.delim(file = moduleroute, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create inner loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i],
"/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
# End of inner loop
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Transpose dataframe
module <- as.data.frame(t(module))
# Add column with our testedvar input
module$testedvar <- testedvar
# Use melt to pivot the table longer
module <- melt(module, id = "testedvar")
# Add column with crab IDs
module$crab <- rep(crabids)
# Concatenate new column with transcript IDs and crab IDs so each crab-gene forms a single line over time
module$variable <- str_c(module$crab, "_", module$variable)
# Use ggplot to graph non-log-transformed counts. NOTE: since we're inside a for loop, we need to explicitly print ggplot
path <- paste0(modulepath, outpath, "_module_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = value,
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Transcripts per million (TPM)"))
dev.off()
# Use ggplot to graph again, this time transforming our TPM counts
path <- paste0(modulepath, outpath, "_module_log_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
dev.off()
# Use ggplot to graph a third time, just so it shows up in our knitted .Rmd file
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
}
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/cbai_transcriptome_v2.0/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module. If there are leading zeroes, put as.character() around those libraries
crablibs <- (c(173, 272, as.character(072), 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Vector of all libraries included in module. If there are leading zeroes, put paste0("0", "[libnumber]") around those libraries
crablibs <- (c(173, 272, paste0("0", "72"), 294, 127, 280))
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/cbai_transcriptome_v2.0/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
# Vector of all libraries included in module. If there are leading zeroes, put paste0("0", "[libnumber]") around those libraries
crablibs <- (c(173, 272, paste0("0", "72"), 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Pull all files in folder containing modules
modulefiles <- list.files(modulepath)
# Select only files starting in GeneList- and ending in .txt
modulefiles <- str_subset(modulefiles, "^GeneList-[a-z]")
for (i in 1:length(modulefiles)) {
# Produce path to specific module file
moduleroute <- paste0(modulepath, modulefiles[i])
# Each module filename will be something like GeneList-color.txt. Remove the GeneList- and .txt portions so we can write files more easily
outpath <- str_remove(modulefiles[i], "GeneList-")
outpath <- str_remove(outpath, ".txt")
# Read in module data
module <- read.delim(file = moduleroute, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create inner loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i],
"/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
# End of inner loop
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Transpose dataframe
module <- as.data.frame(t(module))
# Add column with our testedvar input
module$testedvar <- testedvar
# Use melt to pivot the table longer
module <- melt(module, id = "testedvar")
# Add column with crab IDs
module$crab <- rep(crabids)
# Concatenate new column with transcript IDs and crab IDs so each crab-gene forms a single line over time
module$variable <- str_c(module$crab, "_", module$variable)
# Use ggplot to graph non-log-transformed counts. NOTE: since we're inside a for loop, we need to explicitly print ggplot
path <- paste0(modulepath, outpath, "_module_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = value,
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Transcripts per million (TPM)"))
dev.off()
# Use ggplot to graph again, this time transforming our TPM counts
path <- paste0(modulepath, outpath, "_module_log_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
dev.off()
# Use ggplot to graph a third time, just so it shows up in our knitted .Rmd file
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
}
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/cbai_transcriptome_v4.0/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/cbai_transcriptomev4.0/"
# Vector of all libraries included in module. If there are leading zeroes, put paste0("0", "[libnumber]") around those libraries
crablibs <- (c(173, 272, paste0("0", "72"), 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Pull all files in folder containing modules
modulefiles <- list.files(modulepath)
# Select only files starting in GeneList- and ending in .txt
modulefiles <- str_subset(modulefiles, "^GeneList-[a-z]")
for (i in 1:length(modulefiles)) {
# Produce path to specific module file
moduleroute <- paste0(modulepath, modulefiles[i])
# Each module filename will be something like GeneList-color.txt. Remove the GeneList- and .txt portions so we can write files more easily
outpath <- str_remove(modulefiles[i], "GeneList-")
outpath <- str_remove(outpath, ".txt")
# Read in module data
module <- read.delim(file = moduleroute, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create inner loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i],
"/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
# End of inner loop
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Transpose dataframe
module <- as.data.frame(t(module))
# Add column with our testedvar input
module$testedvar <- testedvar
# Use melt to pivot the table longer
module <- melt(module, id = "testedvar")
# Add column with crab IDs
module$crab <- rep(crabids)
# Concatenate new column with transcript IDs and crab IDs so each crab-gene forms a single line over time
module$variable <- str_c(module$crab, "_", module$variable)
# Use ggplot to graph non-log-transformed counts. NOTE: since we're inside a for loop, we need to explicitly print ggplot
path <- paste0(modulepath, outpath, "_module_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = value,
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Transcripts per million (TPM)"))
dev.off()
# Use ggplot to graph again, this time transforming our TPM counts
path <- paste0(modulepath, outpath, "_module_log_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
dev.off()
# Use ggplot to graph a third time, just so it shows up in our knitted .Rmd file
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
}
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/hemat_transcriptome_v1.6/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/hemat_transcriptomev1.6/"
# Vector of all libraries included in module. If there are leading zeroes, put paste0("0", "[libnumber]") around those libraries
crablibs <- (c(173, 272, paste0("0", "72"), 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Pull all files in folder containing modules
modulefiles <- list.files(modulepath)
# Select only files starting in GeneList- and ending in .txt
modulefiles <- str_subset(modulefiles, "^GeneList-[a-z]")
for (i in 1:length(modulefiles)) {
# Produce path to specific module file
moduleroute <- paste0(modulepath, modulefiles[i])
# Each module filename will be something like GeneList-color.txt. Remove the GeneList- and .txt portions so we can write files more easily
outpath <- str_remove(modulefiles[i], "GeneList-")
outpath <- str_remove(outpath, ".txt")
# Read in module data
module <- read.delim(file = moduleroute, header = FALSE)
# Rename first column of module data
names(module)[1] <- "Transcript_ID"
# Create inner loop. In each loop, add transcripts per million (tpm) for each crab library
for (i in 1:length(crablibs)) {
# Make filepath to the crab library
filepath <- paste0(libpath, "id", crablibs[i],
"/abundance.tsv")
# Read in library
crabdata <- read.delim(file = filepath, header = TRUE, sep = "\t")
# Remove all columns except transcript ID and transcripts per million
crabdata <- crabdata[,c(1,5)]
# Rename both columns
names(crabdata) <- c("Transcript_ID", paste0("id", crablibs[i]))
# Left join TPM data to genes in module
module <- left_join(module, crabdata, by = "Transcript_ID")
# End of inner loop
}
# Move transcript IDs into rownames
rownames(module) <- module$Transcript_ID
module <- module[,-1]
# Transpose dataframe
module <- as.data.frame(t(module))
# Add column with our testedvar input
module$testedvar <- testedvar
# Use melt to pivot the table longer
module <- melt(module, id = "testedvar")
# Add column with crab IDs
module$crab <- rep(crabids)
# Concatenate new column with transcript IDs and crab IDs so each crab-gene forms a single line over time
module$variable <- str_c(module$crab, "_", module$variable)
# Use ggplot to graph non-log-transformed counts. NOTE: since we're inside a for loop, we need to explicitly print ggplot
path <- paste0(modulepath, outpath, "_module_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = value,
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Transcripts per million (TPM)"))
dev.off()
# Use ggplot to graph again, this time transforming our TPM counts
path <- paste0(modulepath, outpath, "_module_log_TPM_graph.png")
png(path)
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
dev.off()
# Use ggplot to graph a third time, just so it shows up in our knitted .Rmd file
print(ggplot() +
geom_line(data = module, aes(x = testedvar,
y = log(value),
group = variable),
size = .001, color = "steelblue") +
xlab(var) +
ylab("Log-TPM"))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
# Path to directory containing modules
modulepath <- "../output/WGCNA_output/hemat_transcriptome_v1.6/elev_crabs_no_filter/"
# Specify location of kallisto libraries included in module
libpath <- "../output/kallisto_libraries/hemat_transcriptomev1.6/"
# Vector of all libraries included in module. If there are leading zeroes, put paste0("0", "[libnumber]") around those libraries
crablibs <- (c(173, 272, paste0("0", "72"), 294, 127, 280))
# Vector of variable of interest that corresponds to the libraries (should be in same order - if crablibs[3] is from Day 0, and your variable of interest is day, testedvar[3] should be 0)
testedvar <- c(0, 2, 0, 2, 0, 2)
crabids <- c("G", "G", "H", "H", "I", "I")
# Variable - this will be present only in the graphs
var <- "Day"
# Pull all files in folder containing modules
modulefiles <- list.files(modulepath)
# Select only files starting in GeneList- and ending in .txt
modulefiles <- str_subset(modulefiles, "^GeneList-[a-z]")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(WGCNA)
library(DESeq2)
# Path to kallisto libraries
kallisto_path <- "../output/kallisto_libraries/cbai_transcriptomev4.0/"
# Libraries we want to read in to our TPM matrix
libraries <- c("178", "118", "132", "359", "349", "334", "463", "481", "485")
# For each row, crab and day should correspond to the order of libraries (ex: 4th row of crabTraits should match libraries[4])
crabTraits <- data.frame("crab" = rep(c("A", "B", "C"), times = 3),
"day" = factor(c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3))))
# Create clinical data trait matrix. Same rules as above, but both crab and day are numeric. Crab A will be noted as 1, B as 2, and C as 3
crabClinicalData <- data.frame("crab" = rep(c(1, 2, 3), times = 3),
"day" = c(rep(0, times = 3),
rep(2, times = 3),
rep(17, times = 3)))
# Variable being examined - should match column in two data frames above
variable <- "day"
# Start and ending we want for each file and graph saved
file_start <- "../output/WGCNA_output/cbai_transcriptome_v4.0/amb_crabs_no_filter/"
# Location of blastx table
blastx_table_site <- "../data/cbai_blastx_table_transcriptome_v4.0.txt"
# Number of samples we're examining
numsamples <- 9
# Create character vector with all filenames for our libraries
kallisto_files <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# Read first kallisto file in to start data frame
TPMcounts <- read.delim(file = kallisto_files[1],
header = TRUE,
sep = "\t")
# Eliminate all columns except transcript ID and TPM
TPMcounts <- TPMcounts %>%
select(target_id, tpm)
# Rename columns for consistency and to ID TPM counts
colnames(TPMcounts)[1:2] <- c("Transcript_ID",
paste0("id", libraries[1], "_TPM"))
# Loop through remaining kallisto files, performing full joins to the kallisto file we read in
for (i in 2:length(kallisto_files)){
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names to give ID to count column
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
# Perform full join, keeping all transcript IDs
TPMcounts <- full_join(TPMcounts, kallisto_output, by = "Transcript_ID")
}
View(TPMcounts)
testing <- TPMcounts[,-2:3]
testing <- TPMcounts[,-2]
View(testing)
testing <- TPMcounts
testing <- TPMcounts[, -c(3,4, 6,7,9,10)]
View(testing)
rownames(testing) <- testing[, 1]
View(testing)
testing[, -1]
testing <- testing[, -1]
View(testing)
write.table(testing, file = "Crab_A_cbai_transcriptome_v4.0")
write.table(testing, file = "Crab_A_cbai_transcriptome_v4.0.txt")
testing <- TPMcounts
testing <- TPMcounts[, -c(3,4, 6,7,9,10)]
write.table(testing, file = "Crab_A_cbai_transcriptome_v4.0.txt")
rownames(testing) <- testing[, 1]
testing <- testing[, -1]
write.table(testing, file = "Crab_A_cbai_transcriptome_v4.0.txt")
names(testing) <- c("Day_0", "Day_2", "Day_17")
View(testing)
write.table(testing, file = "Crab_A_cbai_transcriptome_v4.0.txt")
