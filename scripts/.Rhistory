header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename column names to give ID to count column
colnames(kallisto_output) <- c("Transcript_ID",
paste0("id",
crabIDs[[i]][j],
"_TPM"))
# Add TPM value to table of DEGs with full join
TPMcts <- full_join(TPMcts, kallisto_output,
by = "Transcript_ID")
}
# Write results to file
write.table(TPMcts, file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
sep = "\t",
row.names = FALSE)
}
# Set height of clusters for samples with 3 time points
clusterht <- 1.8
# Set height of clusters for samples with 2 time points
twoday_clusterht <- 10
for (i in 1:length(crabs)) {
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Read in data
crabdat <- read.delim(file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
row.names = 1)
# Drop any genes with less than 5 counts across all 3 samples
keep <- rowSums(crabdat) >= 5
f.crabdat <- crabdat[keep, ]
print(paste("# of genes remaining after pre-filtering:", nrow(f.crabdat)))
print(paste("# of genes dropped:", nrow(crabdat) - nrow(f.crabdat), sep = " "))
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
} else {
# Construct heat map
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
}
}
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("pheatmap", "tidyverse")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# For the sake of completeness, also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected. E and F libraries were only created using cbai_transcriptomev4.0 (since they are libraries of uninfected crab, a transcriptome of only C. bairdi genes is the only one used for alignment). When getting TPMs for libraries aligned to other transcriptomes, comment them out.
# crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
# crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs (all that aren't commented out above)
crabs <- c("A", "B", "C", "E", "G", "H", "I")
# Create a list of all crabs that aren't commented out above
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabE_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to location of kallisto libraries
libpath <- "../output/kallisto_libraries/hemat_transcriptomev1.6/"
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/hemat_transcriptomev1.6/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/hemat_transcriptomev1.6/"
for (i in 1:length(crabIDs)) {
# Create character vector with all filenames for our libraries
crabfiles <- paste0(libpath, "id", crabIDs[[i]], "/abundance.tsv")
# Read in first kallisto library to start data frame
TPMcts <- read.delim(file = crabfiles[1],
header = TRUE,
sep = "\t")
# Eliminate all columns except transcript ID and TPM
TPMcts <- TPMcts %>%
select(target_id, tpm)
# Rename columns for consistency and to ID TPM counts
colnames(TPMcts) <- c("Transcript_ID",
paste0("id",
crabIDs[[i]][1],
"_TPM"))
# Loop through remaining libraries and create file of TPMs over time
for (j in 2:length(crabIDs[[i]])) {
kallisto_output <- read.delim(file = crabfiles[j],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename column names to give ID to count column
colnames(kallisto_output) <- c("Transcript_ID",
paste0("id",
crabIDs[[i]][j],
"_TPM"))
# Add TPM value to table of DEGs with full join
TPMcts <- full_join(TPMcts, kallisto_output,
by = "Transcript_ID")
}
# Write results to file
write.table(TPMcts, file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
sep = "\t",
row.names = FALSE)
}
# Set height of clusters for samples with 3 time points
clusterht <- 1.8
# Set height of clusters for samples with 2 time points
twoday_clusterht <- 15
for (i in 1:length(crabs)) {
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Read in data
crabdat <- read.delim(file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
row.names = 1)
# Drop any genes with less than 5 counts across all 3 samples
keep <- rowSums(crabdat) >= 5
f.crabdat <- crabdat[keep, ]
print(paste("# of genes remaining after pre-filtering:", nrow(f.crabdat)))
print(paste("# of genes dropped:", nrow(crabdat) - nrow(f.crabdat), sep = " "))
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
} else {
# Construct heat map
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
}
}
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# For the sake of completeness, also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected. E and F libraries were only created using cbai_transcriptomev4.0 (since they are libraries of uninfected crab, a transcriptome of only C. bairdi genes is the only one used for alignment). When getting TPMs for libraries aligned to other transcriptomes, comment them out.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs (all that aren't commented out above)
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# Create a list of all crabs that aren't commented out above
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to location of kallisto libraries
libpath <- "../output/kallisto_libraries/cbai_transcriptomev4.0/"
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev4.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/"
for (i in 1:length(crabIDs)) {
# Create character vector with all filenames for our libraries
crabfiles <- paste0(libpath, "id", crabIDs[[i]], "/abundance.tsv")
# Read in first kallisto library to start data frame
TPMcts <- read.delim(file = crabfiles[1],
header = TRUE,
sep = "\t")
# Eliminate all columns except transcript ID and TPM
TPMcts <- TPMcts %>%
select(target_id, tpm)
# Rename columns for consistency and to ID TPM counts
colnames(TPMcts) <- c("Transcript_ID",
paste0("id",
crabIDs[[i]][1],
"_TPM"))
# Loop through remaining libraries and create file of TPMs over time
for (j in 2:length(crabIDs[[i]])) {
kallisto_output <- read.delim(file = crabfiles[j],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename column names to give ID to count column
colnames(kallisto_output) <- c("Transcript_ID",
paste0("id",
crabIDs[[i]][j],
"_TPM"))
# Add TPM value to table of DEGs with full join
TPMcts <- full_join(TPMcts, kallisto_output,
by = "Transcript_ID")
}
# Write results to file
write.table(TPMcts, file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
sep = "\t",
row.names = FALSE)
}
# Set height of clusters for samples with 3 time points
clusterht <- 1.8
# Set height of clusters for samples with 2 time points
twoday_clusterht <- 10
for (i in 1:length(crabs)) {
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Read in data
crabdat <- read.delim(file = paste0(TPM_outpath,
"Crab_",
crabs[i],
"_TPMcts.txt"),
row.names = 1)
# Drop any genes with less than 5 counts across all 3 samples
keep <- rowSums(crabdat) >= 5
f.crabdat <- crabdat[keep, ]
print(paste("# of genes remaining after pre-filtering:", nrow(f.crabdat)))
print(paste("# of genes dropped:", nrow(crabdat) - nrow(f.crabdat), sep = " "))
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(f.crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
} else {
# Construct heat map
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(f.crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (i in 1:length(unique(lbl))) {
clust <- f.crabdat[which(lbl==i) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
i, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", i, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", i),
fontsize = 9))
dev.off()
}
}
}
View(crabIDs)
