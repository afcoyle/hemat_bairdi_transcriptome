libraries <- "*"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
head(DEG_list)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbaihemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_hemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
# Elevated Day 2 vs. Ambient Day 0+2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_hemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/cbai_hemat_transcriptomev2.0/DEG_IDs/elev2_vs_amb02_indiv_only_DEG_IDs.txt")
knitr::opts_chunk$set(echo = TRUE)
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/elev2_vs_amb02_indiv_only/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/16_running_GO-MWU/cbaihemat2.0_elev2_vs_amb02_indiv_only_pvals.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/cbaihemat_transcriptomev2.0/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/cbaihemat_transcriptomev2.0/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries/cbaihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
# Select only DEGs with transcript IDs that match to genes
DEG_match <- DEG_list[!is.na(DEG_list$Gene_ID),]
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
knitr::opts_chunk$set(echo = TRUE)
library(apeglm)
library(DESeq2)
library(tidyverse)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(temp = factor(c("Low", "Amb", "Elev")),
day = factor(c(0, 2, 17)))
exp_design
exp_design <- data.frame(temp = factor(c("amb", "amb", "amb",
"elev", "elev", "elev")),
day = factor(c(0, 0, 0,
2, 2, 2)))
exp_design
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv",
variable = "temp")
exp_design <- data.frame(temp = factor(c("amb", "amb", "amb",
"elev", "elev", "elev")),
day = factor(c(2, 2, 2,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/amb2_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_elev2_indiv",
variable = "temp")
# Elevated Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath =  "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path =   "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_IDs.txt")
# Elevated Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath =  "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path =   "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_IDs.txt")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/hemat_transcriptomev1.6/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/hemat_transcriptomev1.6/DEG_IDs/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/hemat_transcriptomev1.6/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/hemat_transcriptomev1.6/DEG_IDs/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Elevated Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/elev0_vs_elev2_indiv_All_GeneIDs.txt")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
blast_filepath =  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_elev2_indiv_All_GeneIDs.txt")
knitr::opts_chunk$set(echo = TRUE)
library(apeglm)
library(DESeq2)
library(tidyverse)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2)))
kallisto_path <- "../output/kallisto_matrices/hemat_transcriptomev1.6/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix"
experiment_table <- exp_design
output_path <- "../graphs/DESeq2_output/hemat_transcriptomev1.6/elev0_vs_elev2_indiv"
variable <- "temp"
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table(kallisto_path, header = TRUE,
sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
print(head(data))
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(experiment_table) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(experiment_table)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = experiment_table,
design = as.formula(paste0("~", variable)))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Shrink LFC estimates - used in shrunken MA plot
lfcnames <- resultsNames(deseq2.dds)
print(lfcnames[2])
resLFC <- lfcShrink(deseq2.dds, coef = lfcnames[2],
type = "apeglm")
alpha <- 0.01
deseq2.res$sig <- -log10(deseq2.res$padj)
sum(is.infinite(deseq2.res$sig))
deseq2.res
View(deseq2.dds)
View(deseq2.res)
deseq2.res$sig
DESeq2.res[is.infinite(deseq2.res$sig), "sig"] <- 350
deseq2.res[is.infinite(deseq2.res$sig), "sig"] <- 350
genes.to.plot <- !is.na(deseq2.res$pvalue)
range(deseq2.res[genes.to.plot, "log2FoldChange"])
cols <- densCols(deseq2.res$log2FoldChange, deseq2.res$sig)
cols[deseq2.res$pvalue == 0] <- "purple"
deseq2.res$pch <- 19
deseq2.res$pch[deseq2.res$pvalue == 0] <- 6
plot(deseq2.res$log2FoldChange,
deseq2.res$sig,
col = cols, panel.first = grid(),
main - "Volcano plot",
xlab = "Effect size: log2(fold-change)",
ylab = "-log10(adjusted p-value)",
pch = deseq2.res, cex = 0.6)
plot(deseq2.res$log2FoldChange,
deseq2.res$sig,
col = cols, panel.first = grid(),
main = "Volcano plot",
xlab = "Effect size: log2(fold-change)",
ylab = "-log10(adjusted p-value)",
pch = deseq2.res, cex = 0.6)
plot(deseq2.res$log2FoldChange,
deseq2.res$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab="Effect size: log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=deseq2.res$pch, cex=0.4)
plot(deseq2.res$log2FoldChange,
deseq2.res$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab="Effect size: log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=deseq2.res$pch, cex=0.4)
windows()
window()
windows()
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
# Plot of full results, not shrunken
plotMA(deseq2.res, ylim = c(-28, 28))
plot(cars$speed, cars$dist)
knitr::opts_chunk$set(echo = TRUE)
library(apeglm)
library(apeglm)
library(DESeq2)
library(tidyverse)
library(vsn)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(temp = factor(c("Amb", "Amb", "Amb",
"Elev", "Elev", "Elev")),
day = factor(c(0, 0, 0, 2, 2, 2)))
kallisto_path <- "../output/kallisto_matrices/hemat_transcriptomev1.6/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix"
experiment_table <- exp_design
output_path <- "../graphs/DESeq2_output/hemat_transcriptomev1.6/elev0_vs_elev2_indiv"
variable <- "temp"
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table(kallisto_path, header = TRUE,
sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
print(head(data))
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(experiment_table) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(experiment_table)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = experiment_table,
design = as.formula(paste0("~", variable)))
deseq2.dds <- DESeq(deseq2.dds)
experiment_table
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Shrink LFC estimates - used in shrunken MA plot
lfcnames <- resultsNames(deseq2.dds)
print(lfcnames[2])
resLFC <- lfcShrink(deseq2.dds, coef = lfcnames[2],
type = "apeglm")
alpha <- 0.01
deseq2.res$sig <- -log10(deseq2.res$padj)
sum(is.infinite(deseq2.res$sig))
deseq2.res[is.infinite(deseq2.res$sig), "sig"] <- 350
genes.to.plot <- !is.na(deseq2.res$pvalue)
range(deseq2.res[genes.to.plot, "log2FoldChange"])
cols <- densCols(deseq2.res$log2FoldChange, deseq2.res$sig)
cols[deseq2.res$pvalue == 0] <- "purple"
deseq2.res$pch <- 19
deseq2.res$pch[deseq2.res$pvalue == 0] <- 6
plot(cars$speed, cars$dist)
plot(resultDESeq2$log2FoldChange,
resultDESeq2$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab="Effect size: log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=resultDESeq2$pch, cex=0.4)plot(deseq2.res$log2FoldChange,
plot(resultDESeq2$log2FoldChange,
resultDESeq2$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab = "Effect size: log2(fold-change)",
ylab = "-log10(adjusted p-value)",
pch = resultDESeq2$pch, cex=0.4)plot(deseq2.res$log2FoldChange,
plot(resultDESeq2$log2FoldChange,
resultDESeq2$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab = "Effect size: log2(fold-change)",
ylab = "-log10(adjusted p-value)",
pch = resultDESeq2$pch, cex=0.4)
plot(deseq2.res$log2FoldChange,
deseq2.res$sig,
col=cols, panel.first=grid(),
main="Volcano plot",
xlab = "Effect size: log2(fold-change)",
ylab = "-log10(adjusted p-value)",
pch = deseq2.res$pch, cex=0.4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
source("hematodinium_analysis_functions.R")
# Elevated Day 0 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/elev0_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/elev0_vs_elev2_indiv_All_GOIDs.txt")
# Ambient Day 2 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_elev2_indiv_All_GOIDs.txt")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("hematodinium_analysis_functions.R")
# Elevated Day 0 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file <-  "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file <-  "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_file  <-  "../scripts/46_running_GO-MWU/cbai4.0_elev0_vs_elev2_indiv_pvals.csv")
# Ambient Day 2 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_file = "../scripts/46_running_GO-MWU/cbai4.0_amb2_vs_elev2_indiv_pvals.csv")
library(ape)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("46_running_GO-MWU")
# Edit these to match your data file names:
input="cbai4.0_elev0_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_elev0_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
library(ape)
windows()
ape::windows()
?windows()
windows()
?windows
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
library(grDevices)
windows()
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# Edit these to match your data file names:
input="cbai4.0_amb2_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_amb2_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
